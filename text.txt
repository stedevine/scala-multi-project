I had to modify a service to support it running in two modes:
"On Prem" - hosted by my company.
"Cloud" - running on managed services in the cloud.

In each of these modes almost all the code is shared but there are a few things that are mode specific.

The service is implemented in Scala and built using SBT.

To reduce complexity and make it clear what code belonged to which mode I refactored the project with the following goals in mind:

1. The build should produce two different jar files.
2. The jars will have different Main classes but will otherwise behave the same.
3. Creating the assembly should cause the existing tests to run.

A working example of my solution to this problem is checked in here : https://github.com/stedevine/scala-multi-project

The structure of the code is :

./src/main/scala/example/Cloud.scala              Main method for cloud mode
./src/main/scala/example/OnPrem.scala             Main method for onprem mode
./src/main/scala/example/common/Service.scala     Shared service code
./src/test/scala/example/common/TestService.scala Unit tests

To implement this I took the following steps:

1. Split the project into a root project, which defines the code that is built and two sub-projects "Cloud" and "OnPrem"

lazy val service = (project in file("."))
  .settings(
    scalaVersion := "2.12.6",
    version := "1.0",
    organization := "example",
    libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5" % Test,
  )

lazy val cloud  = project
  // The compile configuration depends on the compile configuration for service
  // because that's where the code lives.
  .dependsOn(service)

lazy val onPrem  = project
    .dependsOn(service)


sbt:cloud> reload
sbt:cloud> clean / assembly
[info] Updating service...
[info] Done updating.
[info] Updating ...
[info] Done updating.
[info] Formatting 3 Scala sources ProjectRef(uri("file:/home/sdevine/multiball/"), "service")(compile) ...
[info] Compiling 3 Scala sources to /home/sdevine/multiball/target/scala-2.12/classes ...
[info] Done compiling.
[info] Strategy 'discard' was applied to a file (Run the task at debug level to see details)
[info] Assembly up to date: /home/sdevine/multiball/cloud/target/scala-2.12/cloud-assembly-0.1.0-SNAPSHOT.jar

[success] Total time: 1 s, completed Sep 28, 2018 9:49:28 AM

This successfully creates a jar but there's no main method
sdevine@sdevine-desk:~/multiball$ java -jar /home/sdevine/multiball/cloud/target/scala-2.12/cloud-assembly-0.1.0-SNAPSHOT.jar
no main manifest attribute, in /home/sdevine/multiball/cloud/target/scala-2.12/cloud-assembly-0.1.0-SNAPSHOT.jar



2. Add the main method for the Compile and assembly configurations

lazy val cloud  = project
  .settings(
    // Set the entry point using the fully qualified name.
    // Settings for the Compile and assembly configurations are set separately
    mainClass in Compile := Some("example.Cloud"),
    mainClass in assembly := Some("example.Cloud"),
  )
  .dependsOn(service)

sbt:cloud> reload
sbt:cloud> run
[warn] Multiple main classes detected.  Run 'show discoveredMainClasses' to see the list
[info] Packaging /home/sdevine/multiball/target/scala-2.12/service_2.12-1.0.jar ...
[info] Packaging /home/sdevine/multiball/cloud/target/scala-2.12/cloud_2.12-0.1.0-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done packaging.
[info] Running example.Cloud
This service is running in the cloud! [example.Cloud$]
[success] Total time: 0 s, completed Sep 28, 2018 9:57:01 AM

sbt:cloud> clean / assembly
[info] Strategy 'discard' was applied to a file (Run the task at debug level to see details)
[info] Packaging /home/sdevine/multiball/cloud/target/scala-2.12/cloud-assembly-0.1.0-SNAPSHOT.jar ...
[info] Done packaging.
[success] Total time: 1 s, completed Sep 28, 2018 9:58:30 AM

sdevine@sdevine-desk:~/multiball$ java -jar /home/sdevine/multiball/cloud/target/scala-2.12/cloud-assembly-0.1.0-SNAPSHOT.jar
This service is running in the cloud! [example.Cloud$]

Great! but the tests don't run during the assembly phase.

In fact no tests are detected!

sbt:cloud> test
[success] Total time: 0 s, completed Sep 28, 2018 9:59:42 AM

3. Point the test configuration for the subprojects to the test configuration in the service project:

lazy val cloud  = project
  .settings(
    mainClass in Compile := Some("example.Cloud"),
    mainClass in assembly := Some("example.Cloud"),

    // Tests are defined the service project, there are no tests to execute under
    // Cloud/src/test/scala/...
    // run the service tests when we execute the test tasks in the Test or assembly configurations.
    test in Test := (service / Test / test).value,
    testOnly in Test := (service / Test / testOnly).evaluated,  // testOnly is an InputTask
    test in assembly := (service / Test / test).value,
  )
  .dependsOn(service)

sbt:cloud> reload
sbt:cloud> clean / assembly
[info] Formatting 1 Scala source ProjectRef(uri("file:/home/sdevine/multiball/"), "service")(test) ...
[info] Compiling 1 Scala source to /home/sdevine/multiball/target/scala-2.12/test-classes ...
[info] Done compiling.
[info] TestService:
[info] - output text is formatted
[info] Run completed in 88 milliseconds.
[info] Total number of tests run: 1
[info] Suites: completed 1, aborted 0
[info] Tests: succeeded 1, failed 0, canceled 0, ignored 0, pending 0
[info] All tests passed.
[info] Strategy 'discard' was applied to a file (Run the task at debug level to see details)
[info] Assembly up to date: /home/sdevine/multiball/cloud/target/scala-2.12/cloud-assembly-0.1.0-SNAPSHOT.jar
[success] Total time: 0 s, completed Sep 28, 2018 10:01:24 AM


Almost there, let's just clean some things up

lazy val service = (project in file("."))
  .settings(
    scalaVersion := "2.12.6",
    version := "1.0",
    organization := "example",
    libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5" % Test,
  )
  // Don't build a jar for the service project, there's no entry point
  // and it's not used as a stand alone library.
  .disablePlugins(sbtassembly.AssemblyPlugin)

lazy val cloud  = project
  .settings(
    mainClass in Compile := Some("example.Cloud"),
    mainClass in assembly := Some("example.Cloud"),

    test in Test := (service / Test / test).value,
    testOnly in Test := (service / Test / testOnly).evaluated,
    test in assembly := (service / Test / test).value,

    // Write the output under the common target directory
    // otherwise we have to include cloud and onprem  directories in the .gitignore file
    target := file("target/cloud"),
    assemblyJarName in assembly := "cloud.jar"
  )
  .dependsOn(service)

sbt:cloud> reload
sbt:cloud> clean / assembly
[info] Updating ...
[info] Done updating.
[info] TestService:
[info] - output text is formatted
[info] Run completed in 89 milliseconds.
[info] Total number of tests run: 1
[info] Suites: completed 1, aborted 0
[info] Tests: succeeded 1, failed 0, canceled 0, ignored 0, pending 0
[info] All tests passed.
[info] Strategy 'discard' was applied to a file (Run the task at debug level to see details)
[info] Packaging /home/sdevine/multiball/target/cloud/scala-2.12/cloud.jar ...
[info] Done packaging.
[success] Total time: 1 s, completed Sep 28, 2018 10:04:12 AM

sdevine@sdevine-desk:~/multiball$ java -jar /home/sdevine/multiball/target/cloud/scala-2.12/cloud.jar
This service is running in the cloud! [example.Cloud$]

If the same settings are applied to the onprem project :

sdevine@sdevine-desk:~/multiball$ java -jar /home/sdevine/multiball/target/onprem/scala-2.12/onprem.jar
This service is running on prem [example.OnPrem$]
